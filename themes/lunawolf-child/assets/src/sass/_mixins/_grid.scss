/// Grid system
//
// Generate semantic grid columns with these mixins.

@mixin make-wrapper {
  width: 100%;
  padding-right: 32px;
  padding-left: 32px;
  margin-right: auto;
  margin-left: auto;

  @include media-up(m) {
    padding-left: 48px;
    padding-right: 48px;
  }

  @include media-up(l) {
    padding-left: 64px;
    padding-right: 64px;
  }
}


// For each breakpoint, define the maximum width of the wrapper in a media query
@mixin make-wrapper-max-widths($max-widths: $wrapper-max-widths, $breakpoints: $grid-breakpoints) {
  @each $breakpoint, $wrapper-max-width in $max-widths {
    @include media-up($breakpoint, $breakpoints) {
      max-width: $wrapper-max-width;
    }
  }
}

@mixin make-wrap {
  display: flex;
  flex-wrap: wrap;
  margin-right: calc($grid-gutter-width / -2);
  margin-left: calc($grid-gutter-width / -2);
}

@mixin make-col-ready {
  position: relative;
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we use `flex` values
  // later on to override this initial width.
  width: 100%;
  min-height: 1px; // Prevent collapsing
  padding-right: calc($grid-gutter-width / 2);
  padding-left: calc($grid-gutter-width / 2);
  box-sizing: border-box;
}

@mixin make-col($size, $columns: $grid-columns) {
  flex: 0 0 auto;
  // Add a `max-width` to ensure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.
  //max-width: percentage(calc($size / $columns));
  width: percentage(calc($size / $columns));
}

@mixin make-col-offset($size, $columns: $grid-columns) {
  $num: calc($size / $columns);
  margin-left: if($num == 0, 0, percentage($num));
}
